[gd_scene load_steps=2 format=2]

[ext_resource path="res://src/Extensions/Example/elements/NewExtension.gd" type="Script" id=1]

[node name="NewExtension" type="ConfirmationDialog"]
margin_right = 536.0
margin_bottom = 328.0
rect_min_size = Vector2( 170, 59.5 )
window_title = "New Extension"
script = ExtResource( 1 )

[node name="PanelContainer" type="PanelContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 8.0
margin_top = 8.0
margin_right = -8.0
margin_bottom = -36.0

[node name="VBoxContainer" type="VBoxContainer" parent="PanelContainer"]
margin_left = 7.0
margin_top = 7.0
margin_right = 517.0
margin_bottom = 307.0

[node name="Name" type="HBoxContainer" parent="PanelContainer/VBoxContainer"]
margin_right = 510.0
margin_bottom = 30.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/Name"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Name:"
align = 2

[node name="LineEdit" type="LineEdit" parent="PanelContainer/VBoxContainer/Name"]
margin_left = 104.0
margin_right = 510.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "Name of Extension"

[node name="DisplayName" type="HBoxContainer" parent="PanelContainer/VBoxContainer"]
margin_top = 34.0
margin_right = 510.0
margin_bottom = 64.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/DisplayName"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Display Name:"
align = 2

[node name="LineEdit" type="LineEdit" parent="PanelContainer/VBoxContainer/DisplayName"]
margin_left = 104.0
margin_right = 510.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "Name visible to user"

[node name="Description" type="HBoxContainer" parent="PanelContainer/VBoxContainer"]
margin_top = 68.0
margin_right = 510.0
margin_bottom = 98.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/Description"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Description:"
align = 2

[node name="LineEdit" type="LineEdit" parent="PanelContainer/VBoxContainer/Description"]
margin_left = 104.0
margin_right = 510.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "What does this extension do?"

[node name="Author" type="HBoxContainer" parent="PanelContainer/VBoxContainer"]
margin_top = 102.0
margin_right = 510.0
margin_bottom = 132.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/Author"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Author:"
align = 2

[node name="LineEdit" type="LineEdit" parent="PanelContainer/VBoxContainer/Author"]
margin_left = 104.0
margin_right = 510.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "Your own name?"

[node name="License" type="HBoxContainer" parent="PanelContainer/VBoxContainer"]
margin_top = 136.0
margin_right = 510.0
margin_bottom = 166.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/License"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "License:"
align = 2

[node name="LineEdit" type="LineEdit" parent="PanelContainer/VBoxContainer/License"]
margin_left = 104.0
margin_right = 510.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "MIT, etc..."

[node name="Version" type="HBoxContainer" parent="PanelContainer/VBoxContainer"]
margin_top = 170.0
margin_right = 178.0
margin_bottom = 200.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 0

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/Version"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Version:"
align = 2

[node name="SpinBox" type="SpinBox" parent="PanelContainer/VBoxContainer/Version"]
margin_left = 104.0
margin_right = 178.0
margin_bottom = 30.0
size_flags_horizontal = 3
min_value = 0.1
max_value = 1000.0
step = 0.001
value = 0.1
allow_greater = true

[node name="HSeparator" type="HSeparator" parent="PanelContainer/VBoxContainer"]
margin_top = 204.0
margin_right = 510.0
margin_bottom = 208.0

[node name="ApiLevel" type="HBoxContainer" parent="PanelContainer/VBoxContainer"]
margin_top = 212.0
margin_right = 510.0
margin_bottom = 242.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/ApiLevel"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Target Api For:"
align = 2

[node name="Api" type="OptionButton" parent="PanelContainer/VBoxContainer/ApiLevel"]
margin_left = 104.0
margin_right = 247.0
margin_bottom = 30.0
text = "Pixelorama 0.11.x"
items = [ "Pixelorama 0.10.x", null, false, 0, null, "Pixelorama 0.11.x", null, false, 1, null ]
selected = 1

[node name="HSeparator2" type="HSeparator" parent="PanelContainer/VBoxContainer"]
margin_top = 246.0
margin_right = 510.0
margin_bottom = 250.0

[node name="Save" type="HBoxContainer" parent="PanelContainer/VBoxContainer"]
margin_top = 254.0
margin_right = 510.0
margin_bottom = 300.0
rect_min_size = Vector2( 0, 30 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/Save"]
margin_top = 22.0
margin_right = 100.0
margin_bottom = 46.0
rect_min_size = Vector2( 100, 24 )
size_flags_vertical = 8
text = "Save Path:"
align = 2
valign = 1

[node name="path" type="LineEdit" parent="PanelContainer/VBoxContainer/Save"]
margin_left = 104.0
margin_top = 22.0
margin_right = 441.0
margin_bottom = 46.0
size_flags_horizontal = 3
size_flags_vertical = 8
editable = false

[node name="Choose" type="Button" parent="PanelContainer/VBoxContainer/Save"]
margin_left = 445.0
margin_top = 26.0
margin_right = 510.0
margin_bottom = 46.0
size_flags_vertical = 8
text = "Choose?"

[node name="FileDialog" type="FileDialog" parent="."]
margin_left = 8.0
margin_top = 8.0
margin_right = 528.0
margin_bottom = 292.0
rect_min_size = Vector2( 172, 60.2 )
window_title = "Open a Directory"
mode = 2
access = 2

[node name="Error" type="AcceptDialog" parent="."]
margin_left = 8.0
margin_top = 8.0
margin_right = 528.0
margin_bottom = 292.0
dialog_text = "Error: Directory not created"

[node name="Hidden" type="Node" parent="."]

[node name="ApiVersions" type="Node" parent="Hidden"]

[node name="1" type="RichTextLabel" parent="Hidden/ApiVersions"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "extends Node

# This is a Virtual Api that is used to make extensions
enum { FILE, EDIT, SELECT, IMAGE, VIEW, WINDOW, HELP }


func get_api_version() -> int:
	# Returns the api version of pixelorama
	return 1


func get_pixelorama_version() -> String:
	# Returns the version of pixelorama
	return \"0.10.0\"


func dialog_open(open: bool) -> void:
	# Tell pixelorama that a dialog is being opened
	pass


func get_current_project():
	# Returns the current project (type: Project)
	pass


func get_global():
	# Returns the Global autoload used by pixelorama
	pass


func get_extensions_node() -> Node:
	# Returns the Extensions Node (the parent of the extension's Main.tscn)
	return Node.new()


func get_dockable_container_ui() -> Node:
	# Returns the DockableContainer node
	return Node.new()


func get_config_file() -> ConfigFile:
	# config_file contains all the settings (Brushes, sizes, preferences, etc...)
	return ConfigFile.new()


func get_canvas():
	# Returns the canvas
	pass


func get_dialogs_parent_node() -> Node:
	# Returns the Dialog node (All dialogs are children of Dialog node)
	return Node.new()


# Dockable container methods
func add_node_as_tab(node: Node, alongside_node: String) -> void:
	# Adds a node as a tab in the same place as an already existing \"alongside_node\"
	pass


func remove_node_from_tab(node: Node) -> void:
	# Removes the node from the DockableContainer
	pass


# Menu methods
func add_menu_item(menu_type: int, item_name: String, item_metadata, item_id := -1) -> int:
	# Adds an entry of name \"item_name\"
	# as a \"menu_type\" (FILE, EDIT, SELECT, IMAGE, VIEW, WINDOW, HELP)

	# Metadata should be of type \"Object\" which is usually a popup
	# and it should also have a method named \"menu_item_clicked\"

	# \"item_idx\" of the added entry is returned
	return 0


func remove_menu_item(menu_type: int, item_idx: int) -> void:
	# removes an entry at \"item_idx\" from the menu_type (FILE, EDIT, SELECT, IMAGE, VIEW, WINDOW, HELP)
	pass


# Tool methods
func add_tool(
	tool_name: String,
	display_name: String,
	shortcut: String,
	scene: PackedScene,
	extra_hint := \"\",
	extra_shortucts := []
) -> void:
	# adds a tool with the above detail
	pass


func remove_tool(tool_name: String) -> void:
	# removes a tool with name \"tool_name\"
	pass


# Theme methods
func add_theme(theme: Theme) -> void:
	# adds a theme
	pass


func find_theme_index(theme: Theme) -> int:
	# returns index of a theme in preferences
	return 0


func get_theme() -> Theme:
	# returns the current theme
	return Theme.new()


func set_theme(idx: int) -> bool:
	# sets a theme located at a given \"idx\" in preferences

	# if theme set successfully then return true, else false
	return false


func remove_theme(theme: Theme) -> void:
	# remove a theme from preferences
	pass
"

[node name="2" type="RichTextLabel" parent="Hidden/ApiVersions"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "# gdlint: ignore=max-public-methods
extends Node

# use these variables in your extension to access the api
var general := GeneralAPI.new()
var menu := MenuAPI.new()
var dialog := DialogAPI.new()
var panel := PanelAPI.new()
var theme := ThemeAPI.new()
var tools := ToolAPI.new()
var project := ProjectAPI.new()
var signals := SignalsAPI.new()


# The Api Methods Start Here
func get_api_version() -> int:
	# Returns the api version of pixelorama
	return 2


class GeneralAPI:
	# Version And Config
	func get_pixelorama_version() -> String:
		# Returns the version of pixelorama
		return \"0.11.0\"

	func get_config_file() -> ConfigFile:
		# config_file contains all the settings (Brushes, sizes, preferences, etc...)
		return ConfigFile.new()

	# Nodes
	func get_global():
		# Returns the Global autoload used by pixelorama
		pass

	func get_extensions_node() -> Node:
		# Returns the Extensions Node (the parent of the extension's Main.tscn)
		return Node.new()

	func get_canvas():
		# Returns the canvas
		pass


class MenuAPI:
	enum { FILE, EDIT, SELECT, IMAGE, VIEW, WINDOW, HELP }

	func add_menu_item(menu_type: int, item_name: String, item_metadata, item_id := -1) -> int:
		# item_metadata is usually a popup node you want to appear when you click the item_name
		# that popup should also have an (menu_item_clicked) function inside it's script
		# \"item_idx\" of the added entry is returned
		return 0

	func remove_menu_item(menu_type: int, item_idx: int) -> void:
		# removes an entry at \"item_idx\" from the menu_type (FILE, EDIT, SELECT, IMAGE, VIEW, WINDOW, HELP)
		pass


class DialogAPI:
	func show_error(text: String) -> void:
		# shows an alert dialog with the given \"text\"
		# useful for displaying messages like \"Incompatible API\" etc...
		pass

	func get_dialogs_parent_node() -> Node:
		# returns the node that is the parent of the dialog used in pixelorama
		return Node.new()

	func dialog_open(open: bool) -> void:
		# Tell pixelorama that a dialog is being opened
		pass


class PanelAPI:
	func set_tabs_visible(visible: bool) -> void:
		# sets the visibility of tabs
		pass

	func get_tabs_visible() -> bool:
		# get the visibility of tabs
		return false

	func add_node_as_tab(node: Node) -> void:
		# Adds a \"node\" as a tab
		pass

	func remove_node_from_tab(node: Node) -> void:
		# Removes the \"node\" from the DockableContainer
		pass


class ThemeAPI:
	func add_theme(theme: Theme) -> void:
		# Adds a theme
		pass

	func find_theme_index(theme: Theme) -> int:
		# Returns index of a theme in preferences
		return 0

	func get_theme() -> Theme:
		# Returns the current theme
		return Theme.new()

	func set_theme(idx: int) -> bool:
		# Sets a theme located at a given \"idx\" in preferences
		# If theme set successfully then return true, else false
		return false

	func remove_theme(theme: Theme) -> void:
		# Remove a theme from preferences
		pass


class ToolAPI:
	# Tool methods
	func add_tool(
		tool_name: String,
		display_name: String,
		shortcut: String,
		scene: PackedScene,
		extra_hint := \"\",
		extra_shortucts := [],
		layer_types: PoolIntArray = []
	) -> void:
		# Adds a tool with the above detail
		pass

	func remove_tool(tool_name: String) -> void:
		# Removes a tool with name \"tool_name\"
		# and assign Pencil as left tool, Eraser as right tool
		pass


class ProjectAPI:
	func get_current_project():
		# Returns the current project (type: Project)
		pass

	func get_current_cel_info() -> Dictionary:
		# As there are more than one types of cel in Pixelorama,
		# An extension may try to use a GroupCel as a PixelCel (if it doesn't know the difference)
		# So it's encouraged to use this function to access cels

		# type can be \"GroupCel\", \"PixelCel\", \"Cel3D\", and \"BaseCel\"
		return {\"cel\": null, \"type\": \"\"}

	func get_cel_info_at(project, frame: int, layer: int) -> Dictionary:
		# frames from left to right, layers from bottom to top
		# frames/layers start at \"0\"
		# and end at (project.frames.size() - 1) and (project.layers.size() - 1) respectively
		return {\"cel\": null, \"type\": \"\"}


class SignalsAPI:
	# Global signals
	func connect_project_changed(target: Object, method: String):
		return

	func disconnect_project_changed(target: Object, method: String):
		return

	func connect_cel_changed(target: Object, method: String):
		return

	func disconnect_cel_changed(target: Object, method: String):
		return

	# Tool Signal
	func connect_tool_color_changed(target: Object, method: String):
		return

	func disconnect_tool_color_changed(target: Object, method: String):
		return

	# updater signals
	func connect_current_cel_texture_changed(target: Object, method: String):
		return

	func disconnect_current_cel_texture_changed(target: Object, method: String):
		return
"

[node name="ExportCfg" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "[preset.0]

name=\"Export Extension (PCK)\"
platform=\"Windows Desktop\"
runnable=true
custom_features=\"\"
export_filter=\"all_resources\"
include_filter=\"*.json\"
exclude_filter=\"res://src/Extensions/Example/ExtensionsApi.gd\"
export_path=\"\"
script_export_mode=1
script_encryption_key=\"\"

[preset.0.options]

custom_template/debug=\"\"
custom_template/release=\"\"
binary_format/64_bits=true
binary_format/embed_pck=false
texture_format/bptc=false
texture_format/s3tc=true
texture_format/etc=false
texture_format/etc2=false
texture_format/no_bptc_fallbacks=true
codesign/enable=false
codesign/identity=\"\"
codesign/password=\"\"
codesign/timestamp=true
codesign/timestamp_server_url=\"\"
codesign/digest_algorithm=1
codesign/description=\"\"
codesign/custom_options=PoolStringArray(  )
application/icon=\"\"
application/file_version=\"\"
application/product_version=\"\"
application/company_name=\"\"
application/product_name=\"\"
application/file_description=\"\"
application/copyright=\"\"
application/trademarks=\"\""

[node name="MainGd" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "extends Node


# This script acts as a setup for the extension
func _enter_tree() -> void:
	# add a test panel as a tab
#	ExtensionsApi.panel.add_node_as_tab(Panel.new(), \"Main Canvas\")
	pass

func _exit_tree() -> void:
	pass
"

[node name="MainTscn" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "[gd_scene load_steps=2 format=2]

[ext_resource path=\"res://src/Extensions/%s/Main.gd\" type=\"Script\" id=1]

[node name=\"Main\" type=\"Node\"]
script = ExtResource( 1 )"

[node name="Project" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=4

[application]

config/name=\"Example\"
config/description=\"A pixelorama Extention (The \\\"Name\\\" and \\\"Description\\\" field are not related to extention system so they can be anything)\"
run/main_scene=\"res://src/Extensions/Example/Main.tscn\"

[autoload]

ExtensionsApi=\"*res://src/Extensions/Example/ExtensionsApi.gd\"

[physics]

common/enable_pause_aware_picking=true

[rendering]

quality/driver/driver_name=\"GLES2\"
vram_compression/import_etc=true
vram_compression/import_etc2=false"

[connection signal="about_to_show" from="." to="." method="_on_NewExtension_about_to_show"]
[connection signal="confirmed" from="." to="." method="_on_NewExtension_confirmed"]
[connection signal="text_changed" from="PanelContainer/VBoxContainer/Name/LineEdit" to="." method="_on_Name_text_changed"]
[connection signal="text_changed" from="PanelContainer/VBoxContainer/DisplayName/LineEdit" to="." method="_on_DisplayName_text_changed"]
[connection signal="text_changed" from="PanelContainer/VBoxContainer/Description/LineEdit" to="." method="_on_Description_text_changed"]
[connection signal="text_changed" from="PanelContainer/VBoxContainer/Author/LineEdit" to="." method="_on_Author_text_changed"]
[connection signal="text_changed" from="PanelContainer/VBoxContainer/License/LineEdit" to="." method="_on_License_text_changed"]
[connection signal="value_changed" from="PanelContainer/VBoxContainer/Version/SpinBox" to="." method="_on_Version_value_changed"]
[connection signal="item_selected" from="PanelContainer/VBoxContainer/ApiLevel/Api" to="." method="_on_Target_Api_selected"]
[connection signal="pressed" from="PanelContainer/VBoxContainer/Save/Choose" to="." method="_on_Choose_pressed"]
[connection signal="dir_selected" from="FileDialog" to="." method="_on_FileDialog_dir_selected"]
